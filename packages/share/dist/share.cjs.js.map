{"version":3,"file":"share.cjs.js","sources":["../src/index.ts"],"sourcesContent":["export type ValueOf<T> = T[keyof T]\nexport type ValueOfKey<T, K extends keyof T> = T[K]\nexport type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never\n\nexport interface InfoData {\n    doctype: DocumentType\n    href: string\n    width: number\n    height: number\n    scrollLeft: number\n    scrollTop: number\n    frameId: number | null\n}\n\nexport type SnapshotRecord = BaseRecord<RecordType.SNAPSHOT, { vNode: VNode } & InfoData>\n\ntype Extra = {\n    props?: {\n        [key: string]: string | number | boolean | Object | undefined\n        scroll?: { top: number; left: number }\n    }\n    isSVG?: boolean\n}\n\ntype Children = (VNode | VSNode)[]\n\ntype Attrs = { [key: string]: string }\n\nexport interface VSNode {\n    id: number\n    type: number\n    value: string\n}\n\nexport interface VNode {\n    type: number\n    id: number\n    tag: string\n    attrs: Attrs\n    children: Children\n    extra: Extra\n}\n\nexport enum RecordType {\n    'HEAD',\n    'SNAPSHOT',\n    'WINDOW',\n    'SCROLL',\n    'MOUSE',\n    'DOM',\n    'FORM_EL',\n    'LOCATION',\n    'AUDIO',\n    'CANVAS',\n    'TERMINATE'\n}\n\nexport enum FormElementEvent {\n    'PROP',\n    'INPUT',\n    'CHANGE',\n    'FOCUS',\n    'BLUR'\n}\nexport enum MouseEventType {\n    'MOVE',\n    'CLICK'\n}\n\nexport type TerminateRecord = BaseRecord<RecordType.TERMINATE, null>\n\nexport type WindowRecord = BaseRecord<RecordType.WINDOW, WindowRecordData>\n\nexport interface WindowRecordData {\n    id: number | null\n    width: number\n    height: number\n}\n\nexport type ScrollRecord = BaseRecord<RecordType.SCROLL, ScrollRecordData>\n\nexport interface ScrollRecordData {\n    id: number | null\n    top: number\n    left: number\n}\n\nexport type MouseRecord = BaseRecord<RecordType.MOUSE, MouseRecordData>\nexport interface MouseRecordData {\n    type: MouseEventType\n    x: number\n    y: number\n    id?: number\n}\n\nexport type DOMRecord = BaseRecord<RecordType.DOM, DOMRecordData>\n\nexport interface AttributesUpdateData {\n    id: number\n    value: string | boolean\n    key: string\n}\n\nexport interface CharacterDataUpdateData {\n    parentId: number\n    value: string\n    id: number\n}\n\nexport interface UpdateNodeData {\n    parentId: number\n    nextId: number | null\n    node: VSNode | VNode | number\n}\n\nexport interface movedNodesData {\n    parentId: number\n    id: number\n    nextId: number | null\n}\n\nexport interface RemoveUpdateData {\n    parentId: number\n    id: number\n}\n\nexport interface DOMRecordData {\n    addedNodes?: UpdateNodeData[]\n    movedNodes?: movedNodesData[]\n    removedNodes?: RemoveUpdateData[]\n    attrs?: AttributesUpdateData[]\n    texts?: CharacterDataUpdateData[]\n}\n\nexport type FormElementRecord = BaseRecord<RecordType.FORM_EL, FormElementRecordData>\n\nexport interface FormElementRecordData {\n    type: FormElementEvent\n    id: number\n    key?: string\n    value?: string\n    patches?: FormElementStrPatches[]\n}\n\ninterface FormElementStrPatches {\n    index: number\n    type: 'add' | 'rm'\n    value?: string | undefined\n    len?: number | undefined\n}\n\nexport type AudioRecord = BaseRecord<RecordType.AUDIO, AudioStrList | AudioOptions>\nexport interface AudioOptions {\n    type: 'opts'\n    data: RecorderOptions\n}\nexport interface AudioStrList {\n    type: 'base64'\n    data: string[]\n}\n\nexport type LocationRecord = BaseRecord<RecordType.LOCATION, LocationRecordData>\n\nexport interface LocationRecordData {\n    href: string\n    path: string\n    hash: string\n    contextNodeId: number\n}\nexport type CanvasRecord = BaseRecord<RecordType.CANVAS, CanvasRecordData>\n\nexport type CanvasRecordData = CanvasMutationRecordData | CanvasInitRecordData\n\nexport interface CanvasMutationRecordData {\n    id: number\n    strokes: {\n        name: keyof CanvasRenderingContext2D\n        args: any[]\n    }[]\n}\nexport interface CanvasInitRecordData {\n    id: number\n    src: string\n}\n\nexport type RecordEvent<T extends RecordData> = (e: T) => void\n\nexport type DBRecordData = { id: number } & RecordData\n\nexport type RecordData =\n    | HeadRecord\n    | SnapshotRecord\n    | FormElementRecord\n    | DOMRecord\n    | MouseRecord\n    | WindowRecord\n    | ScrollRecord\n    | AudioRecord\n    | LocationRecord\n    | CanvasRecord\n    | TerminateRecord\n\nexport interface AudioData {\n    src: string\n    opts: RecorderOptions\n    bufferStrList: string[]\n    subtitles: SubtitlesData[]\n}\n\ninterface SubtitlesData {\n    start: string\n    end: string\n    text: string\n}\n\nexport interface RecorderOptions {\n    sampleBits: 8 | 16\n    sampleRate: 8000 | 16000 | 22050 | 24000 | 44100 | 48000\n    channelCount: 1 | 2\n}\n\nexport type IRecorderStatus = 'PAUSE' | 'RECORDING' | 'STOP'\n\nexport enum TransactionMode {\n    'READONLY' = 'readonly',\n    'READWRITE' = 'readwrite',\n    'VERSIONCHANGE' = 'versionchange'\n}\n\nexport type WatcherOptions<T extends RecordData | HeadRecord> = {\n    context: Window\n    listenStore: Set<Function>\n    emit: RecordEvent<T>\n    relatedId: string\n}\n\nexport interface Constructable<T> {\n    new (...args: any): T\n}\n\nexport interface ReplayOptions {\n    mode?: 'live' | 'default'\n    receiver?: (sender: (data: RecordData) => void) => void\n    autoplay?: boolean\n    packs?: ReplayPack[]\n    records?: RecordData[]\n    target?: string | HTMLElement | Window\n}\n\nexport interface ReplayInternalOptions extends ReplayOptions {\n    destroyStore: Set<Function>\n}\n\nexport interface ReplayPack {\n    head: ReplayHead\n    body: ReplayData[]\n}\n\nexport interface ReplayData {\n    index?: number\n    snapshot: SnapshotRecord\n    records: RecordData[]\n    audio: AudioData\n}\n\nexport interface ReplayHead {\n    version: string\n    href: string\n    relatedId: string\n    userAgent: string\n    platform: string\n    beginTime: string\n    endTime?: string\n    extra?: {\n        [key: string]: string\n    }\n}\n\nexport type HeadRecord = BaseRecord<RecordType.HEAD, ReplayHead>\n\nexport interface BaseRecord<T, D = any> {\n    type: T\n    data: D\n    time: string\n    relatedId: string\n}\n"],"names":["RecordType","FormElementEvent","MouseEventType","TransactionMode"],"mappings":";;;;AA2CA,WAAY,UAAU;IAClB,2CAAM,CAAA;IACN,mDAAU,CAAA;IACV,+CAAQ,CAAA;IACR,+CAAQ,CAAA;IACR,6CAAO,CAAA;IACP,yCAAK,CAAA;IACL,iDAAS,CAAA;IACT,mDAAU,CAAA;IACV,6CAAO,CAAA;IACP,+CAAQ,CAAA;IACR,sDAAW,CAAA;AACf,CAAC,EAZWA,kBAAU,KAAVA,kBAAU,QAYrB;AAED,WAAY,gBAAgB;IACxB,uDAAM,CAAA;IACN,yDAAO,CAAA;IACP,2DAAQ,CAAA;IACR,yDAAO,CAAA;IACP,uDAAM,CAAA;AACV,CAAC,EANWC,wBAAgB,KAAhBA,wBAAgB,QAM3B;AACD,WAAY,cAAc;IACtB,mDAAM,CAAA;IACN,qDAAO,CAAA;AACX,CAAC,EAHWC,sBAAc,KAAdA,sBAAc,QAGzB;AA4JD,WAAY,eAAe;IACvB,wCAAuB,CAAA;IACvB,0CAAyB,CAAA;IACzB,kDAAiC,CAAA;AACrC,CAAC,EAJWC,uBAAe,KAAfA,uBAAe;;"}